import os
import json
import math
import subprocess
import streamlit as st
from datetime import datetime
import calendar
import requests

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
CACHE_FILE = "cache.json"
BASE_PRICE_SMALL = 350
PRICE_PER_KM = 32
DISCOUNT_PRICE_PER_KM = 15

EXIT_POINTS = [
    (36.055364, 56.795587),  # –¢–æ—á–∫–∞ 1
    (35.871802, 56.808677),  # –¢–æ—á–∫–∞ 2
    (35.804913, 56.831684),  # –¢–æ—á–∫–∞ 3
    (36.020937, 56.850973),  # –¢–æ—á–∫–∞ 4
    (35.797443, 56.882207),  # –¢–æ—á–∫–∞ 5
    (35.932805, 56.902966),  # –¢–æ—á–∫–∞ 6
    (35.804913, 56.831684),  # –¢–æ—á–∫–∞ 7
]

# ====== –†–ï–ô–°–´ ======
ROUTES = {
    "–ö–í_–ö–õ": ["–ö–æ–Ω–∞–∫–æ–≤–æ", "–†–µ–¥–∫–∏–Ω–æ", "–ú–æ–∫—à–∏–Ω–æ", "–ù–æ–≤–æ–∑–∞–≤–∏–¥–æ–≤—Å–∫–∏–π", "–ö–ª–∏–Ω"],
    "–õ–®_–®–•_–í–ö_–†–ó": ["–†—É–∑–∞", "–í–æ–ª–æ–∫–æ–ª–∞–º—Å–∫", "–®–∞—Ö–æ–≤—Å–∫–∞—è", "–õ–æ—Ç–æ—à–∏–Ω–æ"],
    "–†–ñ_–°–¶_–ó–ë_–ó–î_–ñ–ö_–¢–¶_–í–õ_–ù–õ_–û–õ_–í–õ": ["–í–µ–ª–∏–∫–∏–µ –õ—É–∫–∏", "–ñ–∞—Ä–∫–æ–≤—Å–∫–∏–π", "–¢–æ—Ä–æ–ø–µ—Ü", "–ó–∞–ø–∞–¥–Ω–∞—è –î–≤–∏–Ω–∞",
                                       "–ù–µ–ª–∏–¥–æ–≤–æ", "–û–ª–µ–Ω–∏–Ω–æ", "–ó—É–±—Ü–æ–≤", "–†–∂–µ–≤", "–°—Ç–∞—Ä–∏—Ü–∞"],
    "–ö–ú_–î–ë": ["–î—É–±–Ω–∞", "–ö–∏–º—Ä—ã"],
    "–¢–û_–°–ü_–í–í_–ë–ì_–£–î": ["–ë–æ–ª–æ–≥–æ–µ", "–í—ã—à–Ω–∏–π –í–æ–ª–æ—á–µ–∫", "–°–ø–∏—Ä–æ–≤–æ", "–¢–æ—Ä–∂–æ–∫", "–õ–∏—Ö–æ—Å–ª–∞–≤–ª—å", "–£–¥–æ–º–ª—è"],
    "–†–®_–ú–•_–õ–°_–°–î": ["–°–∞–Ω–¥–æ–≤–æ", "–õ–µ—Å–Ω–æ–µ", "–ú–∞–∫—Å–∞—Ç–∏—Ö–∞", "–†–∞–º–µ—à–∫–∏"],
    "–ë–ö_–°–ù_–ö–•_–í–ì": ["–í–µ—Å—å–µ–≥–æ–Ω—Å–∫", "–ö—Ä–∞—Å–Ω—ã–π –•–æ–ª–º", "–°–æ–Ω–∫–æ–≤–æ", "–ë–µ–∂–µ—Ü–∫"],
    "–ö–®_–ö–ó_–ö–ì": ["–ö–µ—Å–æ–≤–∞ –ì–æ—Ä–∞", "–ö–∞–ª—è–∑–∏–Ω", "–ö–∞—à–∏–Ω"],
    "–°–õ–ñ_–û–°–¢_–ö–£–í": ["–ö—É–≤—à–∏–Ω–æ–≤–æ", "–û—Å—Ç–∞—à–∫–æ–≤", "–°–µ–ª–∏–∂–∞—Ä–æ–≤–æ"]
}

ROUTE_SCHEDULE = {
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": ["–†–ñ_–°–¶_–ó–ë_–ó–î_–ñ–ö_–¢–¶_–í–õ_–ù–õ_–û–õ_–í–õ", "–ö–®_–ö–ó_–ö–ì"],
    "–í—Ç–æ—Ä–Ω–∏–∫": ["–ö–í_–ö–õ", "–õ–®_–®–•_–í–ö_–†–ó"],
    "–°—Ä–µ–¥–∞": ["–ö–ú_–î–ë", "–†–ñ_–°–¶_–ó–ë_–ó–î_–ñ–ö_–¢–¶_–í–õ_–ù–õ_–û–õ_–í–õ", "–°–õ–ñ_–û–°–¢_–ö–£–í"],
    "–ß–µ—Ç–≤–µ—Ä–≥": ["–†–ñ_–°–¶_–ó–ë_–ó–î_–ñ–ö_–¢–¶_–í–õ_–ù–õ_–û–õ_–í–õ", "–¢–û_–°–ü_–í–í_–ë–ì_–£–î"],
    "–ü—è—Ç–Ω–∏—Ü–∞": ["–¢–û_–°–ü_–í–í_–ë–ì_–£–î", "–†–®_–ú–•_–õ–°_–°–î", "–ë–ö_–°–ù_–ö–•_–í–ì"],
}

# ====== –ó–ê–ì–†–£–ó–ö–ê –ö–≠–®–ê ======
def load_cache():
    if os.path.exists(CACHE_FILE):
        with open(CACHE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_cache(cache):
    with open(CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(cache, f, ensure_ascii=False, indent=2)

    repo = os.getenv("GIT_REPO")
    user = os.getenv("GIT_USER")
    token = os.getenv("GIT_TOKEN")
    if repo and user and token:
        try:
            subprocess.run(["git", "add", CACHE_FILE], check=True)
            subprocess.run(["git", "commit", "-m", "Update cache"], check=True)
            subprocess.run(["git", "push", "origin", "main"], check=True)
        except Exception as e:
            st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub: {e}")

# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ======
def haversine(lon1, lat1, lon2, lat2):
    R = 6371
    phi1, phi2 = math.radians(lat1), math.radians(lat2)
    dphi = math.radians(lat2 - lat1)
    dlambda = math.radians(lon2 - lon1)
    a = math.sin(dphi / 2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(dlambda / 2) ** 2
    return 2 * R * math.atan2(math.sqrt(a), math.sqrt(1 - a))

def geocode(address):
    url = f"https://nominatim.openstreetmap.org/search?format=json&q={address}&accept-language=ru"
    resp = requests.get(url).json()
    if resp:
        return float(resp[0]["lat"]), float(resp[0]["lon"]), resp[0]["display_name"]
    return None, None, None

def is_in_tver(address_name):
    return "–¢–≤–µ—Ä—å" in address_name

# ====== STREAMLIT UI ======
st.set_page_config(page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏", page_icon="üöö")

st.title("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –¢–≤–µ—Ä–∏ –∏ –æ–±–ª–∞—Å—Ç–∏")

address = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")
cargo_size = st.selectbox("–†–∞–∑–º–µ—Ä –≥—Ä—É–∑–∞", ["–º–∞–ª–µ–Ω—å–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–±–æ–ª—å—à–æ–π"])

# –†—É—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
today = datetime.today()
cal = calendar.Calendar(firstweekday=0)  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
year, month = today.year, today.month
st.write("### –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏")
date = st.date_input("–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", today, format="DD.MM.YYYY")

if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    if not address:
        st.error("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏!")
    else:
        lat, lon, display_name = geocode(address)
        if not lat:
            st.error("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            if is_in_tver(display_name):
                distance = 0
            else:
                nearest_exit = min(EXIT_POINTS, key=lambda p: haversine(lon, lat, p[0], p[1]))
                distance = haversine(lon, lat, nearest_exit[0], nearest_exit[1]) * 2

            weekday = date.strftime("%A")
            weekday_ru = {
                "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
                "Wednesday": "–°—Ä–µ–¥–∞",
                "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
                "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
                "Saturday": "–°—É–±–±–æ—Ç–∞",
                "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
            }[weekday]

            matched_route = None
            for route, towns in ROUTES.items():
                if any(town in display_name for town in towns) and route in ROUTE_SCHEDULE.get(weekday_ru, []):
                    matched_route = route
                    break

            price_per_km = PRICE_PER_KM
            if matched_route:
                if st.checkbox("–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ —Ä–µ–π—Å—É –≤–º–µ—Å—Ç–µ —Å –æ–ø—Ç–æ–≤—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏"):
                    confirm = st.radio("–í—ã —É–≤–µ—Ä–µ–Ω—ã?", ["–ù–µ—Ç", "–î–∞"])
                    if confirm == "–î–∞":
                        price_per_km = DISCOUNT_PRICE_PER_KM

            total = BASE_PRICE_SMALL + distance * price_per_km
            st.success(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {round(total, 2)} —Ä—É–±.")
            st.write(f"–ê–¥—Ä–µ—Å: {display_name}")
            st.write(f"–î–∞—Ç–∞: {date.strftime('%d.%m.%Y')} ({weekday_ru})")
            st.write(f"–ö–∏–ª–æ–º–µ—Ç—Ä–∞–∂: {round(distance, 2)} –∫–º")
            st.write(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–π—Å: {matched_route if matched_route else '–ù–µ—Ç'}")
